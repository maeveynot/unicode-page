#!/usr/bin/python3
# -*- coding: utf-8 -*-

import os
import sys
import re
import math
import json
import jinja2
import rcssmin
import minify_html
from collections import defaultdict
from itertools import chain
from urllib.parse import urlparse


# This is maybe not the most absolutely correct way to parse every UCD file
# (it's... hard to say, looking at the docs), but it works well enough, and I
# have to assume that *they* assume people are going to do it.
def text_fields(path, sep=";", comment_chr="#"):
    with open(path) as f:
        for line in f:
            line = line.rstrip().partition(comment_chr)[0]
            if line.strip():
                yield [f.strip() for f in line.split(sep)]


# Not an iterator, but since we abstract actually opening the file from text
# data, do it for JSON too.
def json_dict(path):
    with open(path) as f:
        return json.loads(f.read())


# The GitHub shortcode data URIs (in our JSON) exclude any ZWJ or VS16 code
# points. Note that this produces a string that isn't a valid sequence of code
# points, rather than the longer ASCII representation used in the URIs, but
# we're only using it to index a dict lookup so who really cares.
def github_abbrev(emoji):
    return "".join(c for c in emoji if c != "\ufe0f" and c != "\u200d")


# BMP and SMP only for now
def higher_plane(codepoint):
    return (codepoint >> 16) > 1


# Official looking hex
def cp_repr(g):
    return " ".join(f"U+{ord(c):04X}" for c in g)


# I'm making the perhaps controversial decision to have the names NOT ALL BE
# YELLING LIKE THIS. This means we need some heuristics for correct title
# case. They currently fumble some instances where a word in the name is an
# initialism like "WC"; usually, these are the first or last word so I suppose
# we could check that, but I'd want to go through all of them to be sure it
# looks right.
#
# This does mean that if you want to copy a name to refer to it in a plain
# text message for U+R0FL COMEDIC EFFECT, you're going to have to tr or gUU or
# C-x C-u or whatever it yourself. This could perhaps be redressed by passing
# the buck to CSS, but that would require adding markup to handle these edge
# cases and increase page size for something most users do not care about.
def fixup_word(w):
    # These are not exhaustive
    if w.lower() in ["cjk"]:
        return w.upper()
    if w.lower() in ["to", "of", "and", "with"]:
        return w.lower()
    # This syntax is allowed but only actually used once, for #Ô∏è
    w = re.sub(r"\\x{([0-9A-Za-z]+)}", lambda m: chr(int(m[1], 16)), w)
    return w.title()


# Multiple files use this syntax for a range of 1 or more codepoints.
def parse_cp_range(cp_str):
    if ".." in cp_str:
        start, end = [int(i, 16) for i in cp_str.split("..", 1)]
        return range(start, end + 1)
    else:
        return [int(cp_str, 16)]


# Things that appear (as single code points) in the segments list that we
# don't want to load at all.
IGNORE_CODEPOINTS = [
    "<reserved>",
    "<not a character>",
]

# Kinds of code points we can't reasonably display. Would be nice if we could
# skip these at load time; currently this isn't used until render.
IGNORE_CATEGORIES = [
    "Mc",  # combining
    "Cs",  # surrogate
    "Co",  # private
    "Cn",  # unassigned
]


class Grapheme:
    def __init__(self, name, category=None):
        self.name = " ".join(fixup_word(w) for w in name.split())
        self.category = category
        self.segment_name = None
        self.script = None


class Segment:
    def __init__(self, name):
        self.name = name
        self.graphemes = []


class SegmentChart:
    def __init__(self, segment_name):
        self.segment_name = segment_name
        self.rows = []
        self.scripts = set()


class UnicodePageData:
    def __init__(self):
        self.segments = []
        self.pseudo_segments = {}
        self.graphemes = {}
        self.scripts = {}
        self.github_abbrevs = {}
        self.shortcodes = defaultdict(list)

        self.load_unicode_data()
        self.load_segments()
        self.load_scripts()
        self.load_emoji()
        self.load_github_shortcodes()

        # This check is obviously slow, but we want to be able to know if something
        # didn't end up in a segment and won't be rendered.
        if "DEBUG" in os.environ:
            print("debug: checking for orphans...", file=sys.stderr)
            for g in self.graphemes.keys():
                if not any(g in seg.graphemes for seg in self.segments):
                    print(f"warning: orphaned grapheme {cp_repr(g)}", file=sys.stderr)

    def load_unicode_data(self):
        # https://www.unicode.org/reports/tr44/#UnicodeData.txt
        for cp_str, name, cat, cc, bc, dt, dm, nt, nv, bm, v1name, c, um, lm, tm in text_fields("UnicodeData.txt"):
            codepoint = int(cp_str, 16)
            if higher_plane(codepoint):
                continue
            if name == "<control>":
                name = v1name
            if name.endswith(", First>") or name.endswith(", Last>"):
                # Maybe we should keep track of these ranges for debug purposes later
                continue
            g = chr(codepoint)
            self.graphemes[g] = Grapheme(name, cat)
            self.github_abbrevs[github_abbrev(g)] = g

    def load_segments(self):
        seg = None
        seg_name = None
        for first, *rest in text_fields("NamesList.txt", "\t"):
            # There's a lot of different things we can encounter in the first field. We're
            # only interested in segment and codepoint names, but we might want to add the
            # others later:
            #
            # ;<str>  charset declaration
            # @@@     name of the whole list
            # @@@+    informational content about the list (might be empty)
            # @@      block name
            # @@+     probably block info, but always empty
            # @       segment name
            # @+      segment info
            # @~      not sure what this is
            # <hex>   codepoint name
            # <none>  codepoint info (starts with a character indicating what kind)
            #
            if first == "@":
                _, seg_name = rest
                seg = None
            elif re.match(r"[0-9A-Fa-f]+\b", first):
                cp_str = first
                (name,) = rest
                if name in IGNORE_CODEPOINTS:
                    continue
                codepoint = int(cp_str, 16)
                if higher_plane(codepoint):
                    continue
                if not seg:
                    seg = Segment(seg_name)
                    self.segments.append(seg)
                g = chr(codepoint)
                if g in self.graphemes:
                    self.graphemes[g].segment_name = seg_name
                else:
                    print(f"warning: unknown grapheme in segment '{seg_name}': {cp_repr(g)}", file=sys.stderr)
                seg.graphemes.append(g)

    def load_scripts(self):
        for cp_str, script in text_fields("Scripts.txt"):
            for codepoint in parse_cp_range(cp_str):
                if higher_plane(codepoint):
                    continue
                g = chr(codepoint)
                if g in self.graphemes:
                    self.graphemes[g].script = script.replace("_", " ")
                else:
                    # This happens for the <foo, First>..<foo, Last> ranges
                    if "DEBUG" in os.environ:
                        print(f"debug: ignoring {cp_str} for script {script}", file=sys.stderr)
                        break

    def load_emoji(self, *paths):
        fields = chain(text_fields("emoji-sequences.txt"), text_fields("emoji-zwj-sequences.txt"))
        for cp_str, seq_type, name in fields:
            if " " in cp_str:
                # This is an emoji that's a sequence; we haven't seen any of these yet
                codepoints = [int(i, 16) for i in cp_str.split()]
                g = "".join(chr(c) for c in codepoints)
                # Find/create a fake segment corresponding to the first codepoint's segment
                root = chr(codepoints[0])
                if len(codepoints) > 1 and root in self.graphemes:
                    seg_name = f"{self.graphemes[root].segment_name}"
                else:
                    print(f"warning: unknown emoji {cp_repr(g)}", file=sys.stderr)
                    seg_name = "Emoji"
                if seg_name not in self.pseudo_segments:
                    self.pseudo_segments[seg_name] = Segment(seg_name)
                self.pseudo_segments[seg_name].graphemes.append(g)
                # The category here is actually in the comment, but we've stripped comments
                self.graphemes[g] = Grapheme(name, "So")
                emoji = [g]
            else:
                # This is either one single-code-point emoji or a contiguous run of them;
                # we've already seen all of these
                emoji = [chr(cp) for cp in parse_cp_range(cp_str)]
            for g in emoji:
                self.graphemes[g].script = "Emoji"
                self.github_abbrevs[github_abbrev(g)] = g
        self.segments.extend(self.pseudo_segments.values())

    def load_github_shortcodes(self):
        for shortcode, url in json_dict("github-shortcodes.json").items():
            filename = urlparse(url).path.split("/")[-1]
            basename, dot, extension = filename.rpartition(".")
            try:
                a = "".join(chr(int(i, 16)) for i in basename.split("-"))
                if a in self.github_abbrevs:
                    self.shortcodes[self.github_abbrevs[a]].append(shortcode)
            except ValueError:
                # Some of these are quite embarassing
                if "DEBUG" in os.environ:
                    print(f"debug: ignoring {url}", file=sys.stderr)

    def add_script(self, s):
        if s not in self.scripts:
            # this is a bit ugly and could still collide if we exhausted chars
            newid = "s"
            for c in s:
                if not c.isalpha():
                    continue
                newid += c
                if newid not in self.scripts.values():
                    break
            self.scripts[s] = newid
        return self.scripts[s]

    # Once upon a time there was plain text output here too... bring it back someday
    def render_html(self, template_path):
        # We want to paint something above the fold before we update visibility
        # (which is a bunch of expensive DOM operations that we need to defer), so
        # copy the first few segments into a static section which we'll hide after.
        sections = {"facade": [], "full": []}
        # Keep track of all the scripts we've seen, and give them short DOM
        # identifiers. Technically, the first emoji (U+231A WATCH) is encountered
        # after Ol Chiki and before Braille, but given that "Emoji" is not a real
        # script, and for usability reasons, we want to place it at the very top of
        # the list, so prepopulate it here.
        self.add_script("Emoji")

        for seg in self.segments:
            chart = SegmentChart(seg.name)
            for g in seg.graphemes:
                info = self.graphemes.get(g)
                if not info:
                    print(f"warning: no grapheme for {cp_repr(g)}", file=sys.stderr)
                    continue
                if info.category in IGNORE_CATEGORIES:
                    continue
                if "IMPERIALIST_LEXICOGRAPHIC_CHAUVINISM" in os.environ and info.script not in ("Common", "Emoji", "Latin"):
                    continue
                escape = None
                if len(g) == 1 and ord(g) < 0xFF:
                    n = ord(g)
                    if n < 0x20:
                        escape = "^" + chr(n | 0x40)
                    if n == 0x7F:
                        escape = "^?"
                    if n > 0x7F and n < 0xA0:
                        escape = ""
                row = {
                    "grapheme_repr": escape or g,
                    "is_escape": bool(escape),
                    "name": info.name,
                    "size": 10 - int(10 * 23 / max(23, len(info.name))),
                    "cp_repr": cp_repr(g),
                    "cp_rows": int((len(g) + 1) / 2) if len(g) > 1 else 0,
                    "shortcodes": self.shortcodes[g],
                    "category": info.category,
                }
                chart.rows.append(row)
                chart.scripts.add(info.script)
                self.add_script(info.script)

            if "Emoji" in chart.scripts and len(sections["facade"]) < 10:
                sections["facade"].append(chart)
            sections["full"].append(chart)
            if "DEBUG_SEGMENTS" in os.environ:
                print("\t".join([str(len(seg.graphemes)), seg.name, ", ".join(chart.scripts)]), file=sys.stderr)
            if "DEBUG_SCRIPTS" in os.environ and len(chart.scripts) > 1:
                print("\t".join(["-", seg.name, "-"]), file=sys.stderr)
                for g in seg.graphemes:
                    info = self.graphemes[g]
                    print("\t".join([cp_repr(g), info.script, info.name]), file=sys.stderr)

        env = jinja2.Environment(
            loader=jinja2.FileSystemLoader("."),
            autoescape=True,
            undefined=jinja2.StrictUndefined,
            trim_blocks=True,
            lstrip_blocks=True,
        )
        template = env.get_template(template_path)
        vars = {
            "js": js,
            "sections": sections,
            "scripts": self.scripts,
        }
        normal_page = template.render(**vars, css=css)
        mincss_page = template.render(**vars, css=rcssmin.cssmin(css))
        minified_page = minify_html.minify(mincss_page, minify_js=True)
        return (normal_page, minified_page)


if __name__ == "__main__":
    with open("style.css") as f:
        css = f.read()
    with open("script.js") as f:
        js = f.read()

    data = UnicodePageData()
    normal_page, minified_page = data.render_html("template.html.j2")

    with open("index.html", "w") as f:
        f.write(normal_page)
    with open("index.min.html", "w") as f:
        f.write(minified_page)
